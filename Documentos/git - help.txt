 Raimundo Orue @rai.endata
 raimundo@endata.com.ar
 pass: cale324fon

//book 
https://git-scm.com/book/es/v2   //español 

https://desarrolloweb.com/manuales/manual-de-git.html#capitulos185

http://aprendegit.com/

 
 
+------------------------+
| Working Directory		 |         -> Todos los archivos y carpetas del proyecto 
|(directorio de trabajo) | 
+------------------------+

+---------------------------+
| Stage Area  				|  	   -> Todos los archivos y carpetas que pasaran a .git directory luego de un commit   
|(directorio de preparacion)|                                                                                         
+---------------------------+																						  	
																													  		
+-----------------------------+																						  
| .git Directory  			  |    -> repositorio local del proyecto que se va modificando con cada commit			  	
|  (Repository)   			  |
|(directorio de confirmacion) |
+-----------------------------+


                     add              commit                    push
(Working Directory)  ->  (Stage Area)   ->    (.git Directory)   ->  (Remote Directoy)
             <---------------------------------         
			             checkout
			 <--------------------------------------------------------
			             clone (copia local de unrepositorio remoto)
			 <--------------------------------------------------------
			              pull (bajo cambios que otros subieron)

						  
El flujo de trabajo básico en Git es algo así:
	Modificas una serie de archivos en tu directorio de trabajo.
	Preparas los archivos, añadiéndolos a tu área de preparación.
	Confirmas los cambios, lo que toma los archivos tal y como están en el área de preparación y almacena esa copia instantánea de manera permanente en tu directorio de Git.
    subir el repositorio local a uno remoto
 
 //crear un repositorio
 git init    	(en la carpeta donde esta el proyecto, ejecuta el comando)
 git config --global user.name 'tu nombre'
 git config --global user.email 'tu@email.com'
 
 //agregar carpeta o archivos al directorio stage (y tambien para iniciar el seguimieto de git del archivo)
 git add (Working Directory -> Stage Area)
 
 //para sacar del directorio stage
 git reset HEAD <file>..." to unstage
 
 //crear nueva version (guardar en el stage area)
 git commit -m "comentario"   (Stage Area -> .git Directory)
 
 //modificar un commit
 git commit --amend -m "comentario"
 
 //ver estado
 git status
 
 
 //subir projecto gitlab
 git push --set-upstream https://gitlab.com/rai.endata/relojes.git master
 
 git push --set-upstream https://gitlab.com/rai.endata/metroblue.git --tags
 git pull --tags https://gitlab.com/rai.endata/metroblue.git
 
 //crear etiquetas
 git tag 1.0.0 1b2e1d63ff (donde 1b2e1d63ff es el id del commit que se puese ver con git log)
 
 
 //bajar projecto desde gitlab
 git clone https://gitlab.com/rai.endata/relojes

//cambiar usuario 
# Siempre puedes curiosear con lo existente en la configuración...
git config --global --list
 
# Primero, elimina el usuario actual (nombre y correo).
git config --global --unset-all user.name
git config --global --unset-all user.email
 
# Luego, vuelve a configurar las propiedades con tus datos.
git config --global --add user.name "El nuevo usuario"
git config --global --add user.email "nuevo@correo.com"

//solucion de error de certificado (ca-bundle.crt)
git config --global http.sslVerify false



//remover del stage area
git reset HEAD nombre_de_archivo

//borrar archivos del repositorio
git rm --cached nombre_archivo
git rm -r --cached nombre_directorio

//diferencia entre clone y pull
Clonar : obtenga una copy de trabajo del repository remoto.
Pull : estoy trabajando en esto, por favor consígueme los nuevos cambios que otros pueden actualizar.

"origin" —es el nombre predeterminado que le da Git al servidor del que clonaste


Para un repositorio local existente, puedes crear un remoto llamado gitlab del siguiente modo:

$ git remote add gitlab https://server/namespace/project.git

Si no tienes copia local del repositorio, puedes hacer esto:

$ git clone https://server/namespace/project.git

//borrar un commit y manteniendo las modificaciones en el directorio de trabajo
git reset HEAD~1


//borrar un commit eliminando las modificaciones en el directorio de trabajo
git reset --hard HEAD~1

//este comando tambien modifica el reposiorio remoto
git revert HEAD


